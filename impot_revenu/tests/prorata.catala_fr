# Tests des fonctions de prorata

> Usage de Oracles

```catala
#[test]
déclaration champ d'application ProRata1:
  résultat sortie contenu Oracles.ProRataArrondiEuro

champ d'application ProRata1:
  définition sortie égal à
    résultat de Oracles.ProRataArrondiEuro avec {
      -- montant_à_distribuer: 100 €
      -- bases_prorata: [ 1 € ; 2 € ; 3 € ; 4 € ]
    }
  assertion somme argent de sortie.valeurs_proratisées = 100 €
```

```catala-test-cli
$ catala test-scope ProRata1 --disable-warnings
┌─[RESULT]─ ProRata1 ─
│ sortie =
│   Oracles.ProRataArrondiEuro {
│     -- valeurs_proratisées: [10,00 €; 20,00 €; 30,00 €; 40,00 €]
│   }
└─
```

```catala
#[test]
déclaration champ d'application ProRata2:
  résultat sortie contenu Oracles.ProRataArrondiEuro

champ d'application ProRata2:
  définition sortie égal à
    résultat de Oracles.ProRataArrondiEuro avec {
      -- montant_à_distribuer: 15 €
      -- bases_prorata: [ 1 € ; 2 € ; 3 € ; 4 € ]
    }
  assertion somme argent de sortie.valeurs_proratisées = 15 €
```

```catala-test-cli
$ catala test-scope ProRata2 --disable-warnings
┌─[RESULT]─ ProRata2 ─
│ sortie =
│   Oracles.ProRataArrondiEuro {
│     -- valeurs_proratisées: [2,00 €; 3,00 €; 4,00 €; 6,00 €]
│   }
└─
```

```catala
#[test]
déclaration champ d'application ProRata3:
  résultat sortie contenu Oracles.ProRataArrondiEuro

champ d'application ProRata3:
  définition sortie égal à
    résultat de Oracles.ProRataArrondiEuro avec {
      -- montant_à_distribuer: 567 €
      -- bases_prorata: [ 46 € ; 284 € ; 44 € ; 956 € ; 86 € ; 465 € ; 129 € ; 465 € ]
    }
  assertion somme argent de sortie.valeurs_proratisées = 567 €
```

```catala-test-cli
$ catala test-scope ProRata3 --disable-warnings
┌─[RESULT]─ ProRata3 ─
│ sortie =
│   Oracles.ProRataArrondiEuro {
│     -- valeurs_proratisées:
│       [
│         11,00 €; 65,00 €; 10,00 €; 219,00 €; 20,00 €; 106,00 €;
│         30,00 €; 106,00 €
│       ]
│   }
└─
```
